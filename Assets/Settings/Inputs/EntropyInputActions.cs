//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Settings/Inputs/EntropyInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EntropyInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EntropyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EntropyInputActions"",
    ""maps"": [
        {
            ""name"": ""Launcher"",
            ""id"": ""4b8c77f5-4cf2-476b-9f50-d74a15783b99"",
            ""actions"": [
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""87b79c1e-e3f8-4924-9b00-d41bb698d8de"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""8f6a22b8-f729-4c3f-af9e-1897b6a075a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""28349728-e897-45da-961f-9da09b8966fe"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c66604b4-d10b-4b0d-a57b-9dff30237f1f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1bc92909-f3c6-43e3-a6fe-dba1bad93390"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3e3e2884-9e50-4468-bc7d-c3f519c8f1a3"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a4097ecf-08fa-430d-974f-a5ad9b2348bf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""32cbc929-3a10-4740-9a84-260bdfd31cc2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""557c7c24-4326-4ffd-866d-838e475fbfaf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""86a65140-3f9d-4221-8c7f-afd282b726d9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8fa10231-a7d3-47b2-9079-5b4fa7c4299e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8066c25e-9c7e-41a4-876c-bb28e9592574"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Launcher
        m_Launcher = asset.FindActionMap("Launcher", throwIfNotFound: true);
        m_Launcher_Aim = m_Launcher.FindAction("Aim", throwIfNotFound: true);
        m_Launcher_Fire = m_Launcher.FindAction("Fire", throwIfNotFound: true);
        m_Launcher_Direction = m_Launcher.FindAction("Direction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Launcher
    private readonly InputActionMap m_Launcher;
    private ILauncherActions m_LauncherActionsCallbackInterface;
    private readonly InputAction m_Launcher_Aim;
    private readonly InputAction m_Launcher_Fire;
    private readonly InputAction m_Launcher_Direction;
    public struct LauncherActions
    {
        private @EntropyInputActions m_Wrapper;
        public LauncherActions(@EntropyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aim => m_Wrapper.m_Launcher_Aim;
        public InputAction @Fire => m_Wrapper.m_Launcher_Fire;
        public InputAction @Direction => m_Wrapper.m_Launcher_Direction;
        public InputActionMap Get() { return m_Wrapper.m_Launcher; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LauncherActions set) { return set.Get(); }
        public void SetCallbacks(ILauncherActions instance)
        {
            if (m_Wrapper.m_LauncherActionsCallbackInterface != null)
            {
                @Aim.started -= m_Wrapper.m_LauncherActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_LauncherActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_LauncherActionsCallbackInterface.OnAim;
                @Fire.started -= m_Wrapper.m_LauncherActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_LauncherActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_LauncherActionsCallbackInterface.OnFire;
                @Direction.started -= m_Wrapper.m_LauncherActionsCallbackInterface.OnDirection;
                @Direction.performed -= m_Wrapper.m_LauncherActionsCallbackInterface.OnDirection;
                @Direction.canceled -= m_Wrapper.m_LauncherActionsCallbackInterface.OnDirection;
            }
            m_Wrapper.m_LauncherActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Direction.started += instance.OnDirection;
                @Direction.performed += instance.OnDirection;
                @Direction.canceled += instance.OnDirection;
            }
        }
    }
    public LauncherActions @Launcher => new LauncherActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ILauncherActions
    {
        void OnAim(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnDirection(InputAction.CallbackContext context);
    }
}
